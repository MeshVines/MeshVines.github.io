async function doFunction(){
  Plotly.purge(box1);
  var raw = $(w3review).val();//JSON.parse($(w3review).val())
  var raw2 = JSON.parse(raw);
  //for (var key in raw2) {
  //     console.log(key);
  //     console.log(raw2[key]);
   //}
  raw3 = raw2['DataPoints'];
  const timeMeasured = [];
  const brixMeasured = [];
  const tempMeasured = [];

  for(var i = 0; i<raw3.length; i++){
    //console.log(raw3[i]['Brix']);
    timeMeasured[i] = Date.parse(raw3[i]['Timestamp']);
    brixMeasured[i] = raw3[i]['Brix'];
    tempMeasured[i] = raw3[i]['Temperature'];
    //console.log(timeMeasured[i]);
  }

  //alert(raw);
  var apikey = $(apikey2).val();
  //console.log(apikey);
  //alert(JSON.stringify(rule))
  var myHeaders = new Headers();
  myHeaders.append("X-RapidAPI-Key",apikey);
  myHeaders.append("X-RapidAPI-Host", "meshvines1.p.rapidapi.com");
  myHeaders.append("Content-Type","application/json");

  //var raw = "{\r\n\"DataPoints\":[{\r\n\"Timestamp\":\"05-Nov-2019 18:15:00\",\r\n\"Brix\":23.09,\r\n\"Temperature\":13.97},\r\n{\r\n\"Timestamp\":\"05-Nov-2019 23:15:00\",\r\n\"Brix\":23.13,\r\n\"Temperature\":14.91},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 04:15:00\",\r\n\"Brix\":23.1,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 09:15:00\",\r\n\"Brix\":23.02,\r\n\"Temperature\":15.06},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 14:15:00\",\r\n\"Brix\":22.69,\r\n\"Temperature\":14.82},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 19:15:00\",\r\n\"Brix\":22.43,\r\n\"Temperature\":13.32},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 00:15:00\",\r\n\"Brix\":22.43,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 05:15:00\",\r\n\"Brix\":22.3,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 10:15:00\",\r\n\"Brix\":21.96,\r\n\"Temperature\":14.96},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 15:15:00\",\r\n\"Brix\":21.61,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 20:15:00\",\r\n\"Brix\":21.29,\r\n\"Temperature\":14.99},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 01:15:00\",\r\n\"Brix\":20.98,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 06:15:00\",\r\n\"Brix\":20.51,\r\n\"Temperature\":15.01},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 11:15:00\",\r\n\"Brix\":19.9,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 16:15:00\",\r\n\"Brix\":19.28,\r\n\"Temperature\":15},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 21:15:00\",\r\n\"Brix\":18.73,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 02:15:00\",\r\n\"Brix\":18.19,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 07:15:00\",\r\n\"Brix\":17.52,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 12:15:00\",\r\n\"Brix\":16.72,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 17:15:00\",\r\n\"Brix\":15.99,\r\n\"Temperature\":15.01},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 22:15:00\",\r\n\"Brix\":15.4,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"10-Nov-2019 03:15:00\",\r\n\"Brix\":14.83,\r\n\"Temperature\":15.03}],\r\n\"YeastTime\":\"05-Nov-2019 18:15:00\",\r\n\"Smoothing\":1,\r\n\"SSRThreshold\":0.3,\r\n\"SearchSpaceSize\":200,\r\n\"Biomass\":{\r\n\"A\":0.00024,\r\n\"B\":1E-6,\r\n\"Type\":\"N\"},\r\n\"Nitrogen\":{\r\n\"A\":0.0001,\r\n\"B\":0.0003,\r\n\"Type\":\"U\"},\r\n\"Brix\":{\r\n\"A\":23.09,\r\n\"B\":0.01,\r\n\"Type\":\"N\"},\r\n\"Maintenance\":{\r\n\"A\":0.05,\r\n\"B\":0.2,\r\n\"Type\":\"U\"},\r\n\"Lag\":{\r\n\"A\":10,\r\n\"B\":30,\r\n\"Type\":\"U\"},\r\n\"Viability\":{\r\n\"A\":10,\r\n\"B\":60,\r\n\"Type\":\"U\"},\r\n\"EthInh\":{\r\n\"A\":0.025,\r\n\"B\":0.045,\r\n\"Type\":\"U\"}}";

  var requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: raw,
    redirect: 'follow'
  };

  let response = await fetch('https://meshvines1.p.rapidapi.com/boultonmodel/mdgs', requestOptions);
  var obj;
  if (response.ok) { // if HTTP-status is 200-299
    // get the response body (the method explained below)
    obj = await response.json();
    //alert(obj.parse())
  } else {
    alert("HTTP-Error: " + response.status);
  }
  var array;
  try {
  var bd = JSON.parse(obj['body']);
} catch (error) {
  alert("Server Timeout! Decrease SearchSpaceSize");
  // expected output: ReferenceError: nonExistentFunction is not defined
  // Note - error messages will vary depending on browser
}
  //console.log(obj['body']);
  //console.log(bd['ssrpp']);
  var ssrpp = bd['ssrpp'];
  var maintenance = bd['Maintenance'];
  var initialnitrogen = bd['InitialNitrogen'];
  var initialbrix = bd['InitialBrix'];
  var lag = bd['Lag'];
  var viability = bd['Viability'];
  var ethinh = bd['EthInh'];

  //for (var key in bd) {
  //     console.log(key);
  //     console.log(bd[key]);
   //}

   var modelresults = bd['ModelResults']
   var timestamp = modelresults[0];
   var brixBest = modelresults[1];
   var brixLowerBound = modelresults[2];
   var brixUpperBound = modelresults[3];
  //fetch('https://meshvines1.p.rapidapi.com/boultonmodel/mdgs', requestOptions)
//  	.then(response => response.json())
//  	.then(response => console.log(response))
//  	.catch(err => console.error(err));
//  var obj = JSON.parse(response);
  //alert(obj.ModelResults)
  //alert(obj.ModelResults.)
  var Dataset1 = {
    x: timestamp,
    y: modelresults[1],
    mode: "lines",
    type: "scatter",
    name: "BrixBest"
  };
  var Dataset2 = {
    x: timestamp,
    y: modelresults[2],
    mode: "lines",
    name: "BrixLowerBound"
  };
  var Dataset3 = {
    x: timestamp,
    y: modelresults[3],
    mode: "lines",
    name: "BrixUpperBound"
  };
  //timeMeasured = raw3[i]['Timestamp'];
  //brixMeasured = raw3[i]['Brix'];
  //console.log(timeMeasured);
  var Dataset4 = {
    x: timeMeasured,
    y: brixMeasured,
    mode: "markers",
    marker:{
      size: 5
    },
    name: "Measured Brix"
  };
  //tempMeasured = raw3[i]['Temperature'];
  var Dataset5 = {
    x: timeMeasured,
    y: tempMeasured,
    mode: "markers",
    marker:{
      size: 5
    },
    name: "Measured Temperature"
  };
  var labelShift = 25;
  var ssrppL = "SSRpp = ";
  var mntL = "MNT (1/hr) = ";
  var nitL = "NIT (mg/L) = ";
  var lagL = "LAG (hrs) = ";
  var viabL = "VIAB (L/(g*hr)) = ";
  var ethinhL = "ETHINH (L/g) = ";
  /*
  var ssrpp = bd['ssrpp'];
  var maintenance = bd['Maintenance'];
  var initialnitrogen = bd['InitialNitrogen'];
  var initialbrix = bd['InitialBrix'];
  var lag = bd['Lag'];
  var viability = bd['Viability'];
  var ethinh = bd['EthInh'];
  */
  var layout = {
    title: "Boulton Model Modified Direct Grid Search",
    xaxis: {
      title: "Time"
    },

    yaxis: {
      title: "Brix",
      range: [-5,30]
    },
    annotations: [
    {
      x: timestamp[timestamp.length-labelShift],
      y: 30,
      text: ssrppL.concat(ssrpp),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 28,
      text: mntL.concat(maintenance),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 26,
      text: nitL.concat(initialnitrogen),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 24,
      text: lagL.concat(lag),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 22,
      text: viabL.concat(viability),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 20,
      text: ethinhL.concat(ethinh),
      showarrow: false
    },

  ]
    //showlegend: true
  };

  var plot1 = document.getElementById("box1");
  Plotly.plot(plot1, [Dataset1,Dataset2,Dataset3,Dataset4,Dataset5], layout);


  //################################ AVERAGE OF LISTS IN JAVASCRIPT ############################


  //###############################################################################################



  //######################## CONVERTING A STRING LIST INTO AN INTEGER LIST #####################

  //################ plotting those lists ##################################################
  //this makes the xvalues equal to the amount of y values


  //#############################################################################################
}

var el = document.getElementById("clickMe");
if (el.addEventListener)
    el.addEventListener("onclick", doFunction, false);

//else if (el.attachEvent)
//    el.attachEvent('onclick', doFunction);
  /*
  var raw = "{\"DataPoints\":[{\"Timestamp\":\"05-Nov-201918:15:00\",\"Brix\":23.09,\"Temperature\":13.97},{\"Timestamp\":\"05-Nov-201923:15:00\",\"Brix\":23.13,\"Temperature\":14.91},{\"Timestamp\":\"06-Nov-201904:15:00\",\"Brix\":23.1,\"Temperature\":14.97},{\"Timestamp\":\"06-Nov-201909:15:00\",\"Brix\":23.02,\"Temperature\":15.06},{\"Timestamp\":\"06-Nov-201914:15:00\",\"Brix\":22.69,\"Temperature\":14.82},{\"Timestamp\":\"06-Nov-201919:15:00\",\"Brix\":22.43,\"Temperature\":13.32},{\"Timestamp\":\"07-Nov-201900:15:00\",\"Brix\":22.43,\"Temperature\":15.02},{\"Timestamp\":\"07-Nov-201905:15:00\",\"Brix\":22.3,\"Temperature\":15.04},{\"Timestamp\":\"07-Nov-201910:15:00\",\"Brix\":21.96,\"Temperature\":14.96},{\"Timestamp\":\"07-Nov-201915:15:00\",\"Brix\":21.61,\"Temperature\":15.04},{\"Timestamp\":\"07-Nov-201920:15:00\",\"Brix\":21.29,\"Temperature\":14.99},{\"Timestamp\":\"08-Nov-201901:15:00\",\"Brix\":20.98,\"Temperature\":15.02},{\"Timestamp\":\"08-Nov-201906:15:00\",\"Brix\":20.51,\"Temperature\":15.01},{\"Timestamp\":\"08-Nov-201911:15:00\",\"Brix\":19.9,\"Temperature\":14.97},{\"Timestamp\":\"08-Nov-201916:15:00\",\"Brix\":19.28,\"Temperature\":15},{\"Timestamp\":\"08-Nov-201921:15:00\",\"Brix\":18.73,\"Temperature\":15.04},{\"Timestamp\":\"09-Nov-201902:15:00\",\"Brix\":18.19,\"Temperature\":15.04},{\"Timestamp\":\"09-Nov-201907:15:00\",\"Brix\":17.52,\"Temperature\":15.04},{\"Timestamp\":\"09-Nov-201912:15:00\",\"Brix\":16.72,\"Temperature\":14.97},{\"Timestamp\":\"09-Nov-201917:15:00\",\"Brix\":15.99,\"Temperature\":15.01},{\"Timestamp\":\"09-Nov-201922:15:00\",\"Brix\":15.4,\"Temperature\":15.02},{\"Timestamp\":\"10-Nov-201903:15:00\",\"Brix\":14.83,\"Temperature\":15.03}],\"YeastTime\":\"05-Nov-201918:15:00\",\"Smoothing\":1,\"SSRThreshold\":0.3,\"SearchSpaceSize\":200,\"Biomass\":{\"A\":0.00024,\"B\":1E-6,\"Type\":\"N\"},\"Nitrogen\":{\"A\":0.0001,\"B\":0.0003,\"Type\":\"U\"},\"Brix\":{\"A\":23.09,\"B\":0.01,\"Type\":\"N\"},\"Maintenance\":{\"A\":0.05,\"B\":0.2,\"Type\":\"U\"},\"Lag\":{\"A\":10,\"B\":30,\"Type\":\"U\"},\"Viability\":{\"A\":10,\"B\":60,\"Type\":\"U\"},\"EthInh\":{\"A\":0.025,\"B\":0.045,\"Type\":\"U\"}}"
  var raw2 = JSON.parse(raw);
  for (var key in raw2) {
       console.log(key);
       console.log(raw2[key]);
   }
  raw3 = raw2['DataPoints'];
  const timeMeasured = [];
  const brixMeasured = [];
  const tempMeasured = [];

  for(var i = 0; i<raw3.length; i++){
    //console.log(raw3[i]['Brix']);
    timeMeasured[i] = Date.parse(String(raw3[i]['Timestamp']));
    brixMeasured[i] = raw3[i]['Brix'];
    tempMeasured[i] = raw3[i]['Temperature'];
    console.log(timeMeasured[i]);
  }
  */

  //var raw = "{\r\n\"DataPoints\":[{\r\n\"Timestamp\":\"05-Nov-2019 18:15:00\",\r\n\"Brix\":23.09,\r\n\"Temperature\":13.97},\r\n{\r\n\"Timestamp\":\"05-Nov-2019 23:15:00\",\r\n\"Brix\":23.13,\r\n\"Temperature\":14.91},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 04:15:00\",\r\n\"Brix\":23.1,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 09:15:00\",\r\n\"Brix\":23.02,\r\n\"Temperature\":15.06},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 14:15:00\",\r\n\"Brix\":22.69,\r\n\"Temperature\":14.82},\r\n{\r\n\"Timestamp\":\"06-Nov-2019 19:15:00\",\r\n\"Brix\":22.43,\r\n\"Temperature\":13.32},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 00:15:00\",\r\n\"Brix\":22.43,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 05:15:00\",\r\n\"Brix\":22.3,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 10:15:00\",\r\n\"Brix\":21.96,\r\n\"Temperature\":14.96},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 15:15:00\",\r\n\"Brix\":21.61,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"07-Nov-2019 20:15:00\",\r\n\"Brix\":21.29,\r\n\"Temperature\":14.99},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 01:15:00\",\r\n\"Brix\":20.98,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 06:15:00\",\r\n\"Brix\":20.51,\r\n\"Temperature\":15.01},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 11:15:00\",\r\n\"Brix\":19.9,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 16:15:00\",\r\n\"Brix\":19.28,\r\n\"Temperature\":15},\r\n{\r\n\"Timestamp\":\"08-Nov-2019 21:15:00\",\r\n\"Brix\":18.73,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 02:15:00\",\r\n\"Brix\":18.19,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 07:15:00\",\r\n\"Brix\":17.52,\r\n\"Temperature\":15.04},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 12:15:00\",\r\n\"Brix\":16.72,\r\n\"Temperature\":14.97},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 17:15:00\",\r\n\"Brix\":15.99,\r\n\"Temperature\":15.01},\r\n{\r\n\"Timestamp\":\"09-Nov-2019 22:15:00\",\r\n\"Brix\":15.4,\r\n\"Temperature\":15.02},\r\n{\r\n\"Timestamp\":\"10-Nov-2019 03:15:00\",\r\n\"Brix\":14.83,\r\n\"Temperature\":15.03}],\r\n\"YeastTime\":\"05-Nov-2019 18:15:00\",\r\n\"Smoothing\":1,\r\n\"SSRThreshold\":0.3,\r\n\"SearchSpaceSize\":200,\r\n\"Biomass\":{\r\n\"A\":0.00024,\r\n\"B\":1E-6,\r\n\"Type\":\"N\"},\r\n\"Nitrogen\":{\r\n\"A\":0.0001,\r\n\"B\":0.0003,\r\n\"Type\":\"U\"},\r\n\"Brix\":{\r\n\"A\":23.09,\r\n\"B\":0.01,\r\n\"Type\":\"N\"},\r\n\"Maintenance\":{\r\n\"A\":0.05,\r\n\"B\":0.2,\r\n\"Type\":\"U\"},\r\n\"Lag\":{\r\n\"A\":10,\r\n\"B\":30,\r\n\"Type\":\"U\"},\r\n\"Viability\":{\r\n\"A\":10,\r\n\"B\":60,\r\n\"Type\":\"U\"},\r\n\"EthInh\":{\r\n\"A\":0.025,\r\n\"B\":0.045,\r\n\"Type\":\"U\"}}";

  var obj = "{\"statusCode\":200,\"body\":\"{\\\"ssrpp\\\":0.011883,\\\"InitialBiomass\\\":0.000239,\\\"InitialSugar\\\":0.210859,\\\"InitialNitrogen\\\":0.000136,\\\"InitialBrix\\\":23.085913,\\\"Maintenance\\\":0.164214,\\\"Lag\\\":10.73126,\\\"Viability\\\":47.49111,\\\"EthInh\\\":0.032963,\\\"ModelResults\\\":[[\\\"2019-11-0518:15:00\\\",\\\"2019-11-0520:15:00\\\",\\\"2019-11-0522:15:00\\\",\\\"2019-11-0600:15:00\\\",\\\"2019-11-0602:15:00\\\",\\\"2019-11-0604:15:00\\\",\\\"2019-11-0606:15:00\\\",\\\"2019-11-0608:15:00\\\",\\\"2019-11-0610:15:00\\\",\\\"2019-11-0612:15:00\\\",\\\"2019-11-0614:15:00\\\",\\\"2019-11-0616:15:00\\\",\\\"2019-11-0618:15:00\\\",\\\"2019-11-0620:15:00\\\",\\\"2019-11-0622:15:00\\\",\\\"2019-11-0700:15:00\\\",\\\"2019-11-0702:15:00\\\",\\\"2019-11-0704:15:00\\\",\\\"2019-11-0706:15:00\\\",\\\"2019-11-0708:15:00\\\",\\\"2019-11-0710:15:00\\\",\\\"2019-11-0712:15:00\\\",\\\"2019-11-0714:15:00\\\",\\\"2019-11-0716:15:00\\\",\\\"2019-11-0718:15:00\\\",\\\"2019-11-0720:15:00\\\",\\\"2019-11-0722:15:00\\\",\\\"2019-11-0800:15:00\\\",\\\"2019-11-0802:15:00\\\",\\\"2019-11-0804:15:00\\\",\\\"2019-11-0806:15:00\\\",\\\"2019-11-0808:15:00\\\",\\\"2019-11-0810:15:00\\\",\\\"2019-11-0812:15:00\\\",\\\"2019-11-0814:15:00\\\",\\\"2019-11-0816:15:00\\\",\\\"2019-11-0818:15:00\\\",\\\"2019-11-0820:15:00\\\",\\\"2019-11-0822:15:00\\\",\\\"2019-11-0900:15:00\\\",\\\"2019-11-0902:15:00\\\",\\\"2019-11-0904:15:00\\\",\\\"2019-11-0906:15:00\\\",\\\"2019-11-0908:15:00\\\",\\\"2019-11-0910:15:00\\\",\\\"2019-11-0912:15:00\\\",\\\"2019-11-0914:15:00\\\",\\\"2019-11-0916:15:00\\\",\\\"2019-11-0918:15:00\\\",\\\"2019-11-0920:15:00\\\",\\\"2019-11-0922:15:00\\\",\\\"2019-11-1000:15:00\\\",\\\"2019-11-1002:15:00\\\",\\\"2019-11-1004:15:00\\\",\\\"2019-11-1006:15:00\\\",\\\"2019-11-1008:15:00\\\",\\\"2019-11-1010:15:00\\\",\\\"2019-11-1012:15:00\\\",\\\"2019-11-1014:15:00\\\",\\\"2019-11-1016:15:00\\\",\\\"2019-11-1018:15:00\\\",\\\"2019-11-1020:15:00\\\",\\\"2019-11-1022:15:00\\\",\\\"2019-11-1100:15:00\\\",\\\"2019-11-1102:15:00\\\",\\\"2019-11-1104:15:00\\\",\\\"2019-11-1106:15:00\\\",\\\"2019-11-1108:15:00\\\",\\\"2019-11-1110:15:00\\\",\\\"2019-11-1112:15:00\\\",\\\"2019-11-1114:15:00\\\",\\\"2019-11-1116:15:00\\\",\\\"2019-11-1118:15:00\\\",\\\"2019-11-1120:15:00\\\",\\\"2019-11-1122:15:00\\\",\\\"2019-11-1200:15:00\\\",\\\"2019-11-1202:15:00\\\",\\\"2019-11-1204:15:00\\\",\\\"2019-11-1206:15:00\\\",\\\"2019-11-1208:15:00\\\",\\\"2019-11-1210:15:00\\\",\\\"2019-11-1212:15:00\\\",\\\"2019-11-1214:15:00\\\",\\\"2019-11-1216:15:00\\\",\\\"2019-11-1218:15:00\\\",\\\"2019-11-1220:15:00\\\",\\\"2019-11-1222:15:00\\\",\\\"2019-11-1300:15:00\\\",\\\"2019-11-1302:15:00\\\",\\\"2019-11-1304:15:00\\\",\\\"2019-11-1306:15:00\\\",\\\"2019-11-1308:15:00\\\",\\\"2019-11-1310:15:00\\\",\\\"2019-11-1312:15:00\\\",\\\"2019-11-1314:15:00\\\",\\\"2019-11-1316:15:00\\\",\\\"2019-11-1318:15:00\\\",\\\"2019-11-1320:15:00\\\",\\\"2019-11-1322:15:00\\\",\\\"2019-11-1400:15:00\\\",\\\"2019-11-1402:15:00\\\",\\\"2019-11-1404:15:00\\\",\\\"2019-11-1406:15:00\\\",\\\"2019-11-1408:15:00\\\",\\\"2019-11-1410:15:00\\\",\\\"2019-11-1412:15:00\\\",\\\"2019-11-1414:15:00\\\",\\\"2019-11-1416:15:00\\\",\\\"2019-11-1418:15:00\\\",\\\"2019-11-1420:15:00\\\",\\\"2019-11-1422:15:00\\\",\\\"2019-11-1500:15:00\\\",\\\"2019-11-1502:15:00\\\",\\\"2019-11-1504:15:00\\\",\\\"2019-11-1506:15:00\\\",\\\"2019-11-1508:15:00\\\",\\\"2019-11-1510:15:00\\\",\\\"2019-11-1512:15:00\\\",\\\"2019-11-1514:15:00\\\",\\\"2019-11-1516:15:00\\\",\\\"2019-11-1518:15:00\\\",\\\"2019-11-1520:15:00\\\",\\\"2019-11-1522:15:00\\\",\\\"2019-11-1600:15:00\\\",\\\"2019-11-1602:15:00\\\",\\\"2019-11-1604:15:00\\\",\\\"2019-11-1606:15:00\\\",\\\"2019-11-1608:15:00\\\",\\\"2019-11-1610:15:00\\\",\\\"2019-11-1612:15:00\\\",\\\"2019-11-1614:15:00\\\",\\\"2019-11-1616:15:00\\\",\\\"2019-11-1618:15:00\\\",\\\"2019-11-1620:15:00\\\",\\\"2019-11-1622:15:00\\\",\\\"2019-11-1700:15:00\\\",\\\"2019-11-1702:15:00\\\",\\\"2019-11-1704:15:00\\\",\\\"2019-11-1706:15:00\\\",\\\"2019-11-1708:15:00\\\",\\\"2019-11-1710:15:00\\\",\\\"2019-11-1712:15:00\\\",\\\"2019-11-1714:15:00\\\",\\\"2019-11-1716:15:00\\\",\\\"2019-11-1718:15:00\\\",\\\"2019-11-1720:15:00\\\",\\\"2019-11-1722:15:00\\\",\\\"2019-11-1800:15:00\\\",\\\"2019-11-1802:15:00\\\",\\\"2019-11-1804:15:00\\\",\\\"2019-11-1806:15:00\\\",\\\"2019-11-1808:15:00\\\",\\\"2019-11-1810:15:00\\\",\\\"2019-11-1812:15:00\\\",\\\"2019-11-1814:15:00\\\",\\\"2019-11-1816:15:00\\\",\\\"2019-11-1818:15:00\\\",\\\"2019-11-1820:15:00\\\",\\\"2019-11-1822:15:00\\\",\\\"2019-11-1900:15:00\\\",\\\"2019-11-1902:15:00\\\",\\\"2019-11-1904:15:00\\\",\\\"2019-11-1906:15:00\\\",\\\"2019-11-1908:15:00\\\",\\\"2019-11-1910:15:00\\\",\\\"2019-11-1912:15:00\\\",\\\"2019-11-1914:15:00\\\",\\\"2019-11-1916:15:00\\\",\\\"2019-11-1918:15:00\\\",\\\"2019-11-1920:15:00\\\",\\\"2019-11-1922:15:00\\\",\\\"2019-11-2000:15:00\\\",\\\"2019-11-2002:15:00\\\",\\\"2019-11-2004:15:00\\\",\\\"2019-11-2006:15:00\\\",\\\"2019-11-2008:15:00\\\",\\\"2019-11-2010:15:00\\\",\\\"2019-11-2012:15:00\\\",\\\"2019-11-2014:15:00\\\",\\\"2019-11-2016:15:00\\\",\\\"2019-11-2018:15:00\\\",\\\"2019-11-2020:15:00\\\",\\\"2019-11-2022:15:00\\\",\\\"2019-11-2100:15:00\\\",\\\"2019-11-2102:15:00\\\",\\\"2019-11-2104:15:00\\\",\\\"2019-11-2106:15:00\\\",\\\"2019-11-2108:15:00\\\",\\\"2019-11-2110:15:00\\\",\\\"2019-11-2112:15:00\\\",\\\"2019-11-2114:15:00\\\",\\\"2019-11-2116:15:00\\\",\\\"2019-11-2118:15:00\\\",\\\"2019-11-2120:15:00\\\",\\\"2019-11-2122:15:00\\\",\\\"2019-11-2200:15:00\\\",\\\"2019-11-2202:15:00\\\",\\\"2019-11-2204:15:00\\\",\\\"2019-11-2206:15:00\\\",\\\"2019-11-2208:15:00\\\",\\\"2019-11-2210:15:00\\\",\\\"2019-11-2212:15:00\\\",\\\"2019-11-2214:15:00\\\",\\\"2019-11-2216:15:00\\\",\\\"2019-11-2218:15:00\\\",\\\"2019-11-2220:15:00\\\",\\\"2019-11-2222:15:00\\\",\\\"2019-11-2300:15:00\\\",\\\"2019-11-2302:15:00\\\",\\\"2019-11-2304:15:00\\\",\\\"2019-11-2306:15:00\\\",\\\"2019-11-2308:15:00\\\",\\\"2019-11-2310:15:00\\\",\\\"2019-11-2312:15:00\\\",\\\"2019-11-2314:15:00\\\",\\\"2019-11-2316:15:00\\\",\\\"2019-11-2318:15:00\\\",\\\"2019-11-2320:15:00\\\",\\\"2019-11-2322:15:00\\\",\\\"2019-11-2400:15:00\\\",\\\"2019-11-2402:15:00\\\",\\\"2019-11-2404:15:00\\\",\\\"2019-11-2406:15:00\\\",\\\"2019-11-2408:15:00\\\",\\\"2019-11-2410:15:00\\\",\\\"2019-11-2412:15:00\\\",\\\"2019-11-2414:15:00\\\",\\\"2019-11-2416:15:00\\\",\\\"2019-11-2418:15:00\\\",\\\"2019-11-2420:15:00\\\",\\\"2019-11-2422:15:00\\\",\\\"2019-11-2500:15:00\\\",\\\"2019-11-2502:15:00\\\",\\\"2019-11-2504:15:00\\\",\\\"2019-11-2506:15:00\\\",\\\"2019-11-2508:15:00\\\",\\\"2019-11-2510:15:00\\\",\\\"2019-11-2512:15:00\\\",\\\"2019-11-2514:15:00\\\",\\\"2019-11-2516:15:00\\\",\\\"2019-11-2518:15:00\\\",\\\"2019-11-2520:15:00\\\",\\\"2019-11-2522:15:00\\\",\\\"2019-11-2600:15:00\\\",\\\"2019-11-2602:15:00\\\",\\\"2019-11-2604:15:00\\\",\\\"2019-11-2606:15:00\\\",\\\"2019-11-2608:15:00\\\",\\\"2019-11-2610:15:00\\\",\\\"2019-11-2612:15:00\\\",\\\"2019-11-2614:15:00\\\"],[23.085913,23.085913,23.085913,23.085913,23.085913,23.068617,23.031555,22.990967,22.946649,22.898622,22.846666,22.791918,22.73493,22.674625,22.60686,22.530604,22.447421,22.357744,22.261316,22.158041,22.047688,21.929689,21.803669,21.669499,21.52735,21.377138,21.218586,21.051583,20.876184,20.692595,20.500956,20.301568,20.094721,19.880623,19.659322,19.431167,19.196503,18.955737,18.709379,18.458095,18.20239,17.942787,17.679809,17.414098,17.14652,16.877595,16.607287,16.335893,16.063919,15.79195,15.520396,15.24964,14.980035,14.711922,14.44564,14.181446,13.91957,13.660207,13.403526,13.149664,12.898735,12.650823,12.405993,12.164288,11.92573,11.690324,11.458064,11.228925,11.002874,10.77987,10.55986,10.342789,10.128595,9.917214,9.708576,9.502614,9.299259,9.09844,8.90009,8.704142,8.510529,8.319189,8.13006,7.943085,7.758207,7.575373,7.394533,7.215639,7.038646,6.863512,6.690199,6.518668,6.348885,6.180819,6.01444,5.84972,5.686632,5.525155,5.365266,5.206944,5.050171,4.894931,4.741207,4.588985,4.438252,4.288997,4.141207,3.994874,3.849989,3.706542,3.564526,3.423936,3.284764,3.147005,3.010655,2.875708,2.742161,2.610009,2.479251,2.349882,2.221901,2.095304,1.970091,1.846258,1.723804,1.602728,1.483028,1.364704,1.247753,1.132175,1.017969,0.905134,0.793669,0.683573,0.574846,0.467486,0.361493,0.256866,0.153604,0.051706,-0.048828,-0.148,-0.24581,-0.34226,-0.43735,-0.531083,-0.623458,-0.714477,-0.804143,-0.892455,-0.979416,-1.065026,-1.149289,-1.232206,-1.313777,-1.394007,-1.472895,-1.550445,-1.626659,-1.701539,-1.775086,-1.847304,-1.918194,-1.987758,-2.055996,-2.122898,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824,-2.155824],[23.06814,23.06814,23.06814,23.06814,23.06814,23.06814,23.031555,22.990967,22.946649,22.898622,22.846666,22.791918,22.73493,22.67199,22.597299,22.512394,22.418928,22.317339,22.207292,22.088664,21.961188,21.824217,21.677346,21.52048,21.353899,21.177603,20.991369,20.795188,20.589258,20.373964,20.149613,19.916705,19.675718,19.427026,19.170805,18.907577,18.63785,18.362189,18.081266,17.795918,17.497633,17.176458,16.854113,16.531929,16.211476,15.893838,15.579382,15.268847,14.963164,14.663285,14.3699,14.083607,13.777144,13.389409,13.002565,12.617293,12.234251,11.854064,11.477331,11.104618,10.736455,10.37334,10.015731,9.664049,9.318677,8.979955,8.648183,8.323617,8.006471,7.696919,7.395089,7.101069,6.814909,6.536615,6.266161,6.003483,5.748487,5.501046,5.258603,4.969359,4.684112,4.402814,4.125412,3.851852,3.582076,3.316027,3.053647,2.794877,2.53966,2.287938,2.039657,1.794763,1.553202,1.314926,1.079885,0.848033,0.619327,0.393723,0.171182,-0.048333,-0.264859,-0.478429,-0.689073,-0.896822,-1.101701,-1.303734,-1.502941,-1.699334,-1.892904,-2.083548,-2.177469,-2.177469,-2.177469,-2.177469,-2.177469,-2.177469,-2.177469,-2.177469,-2.177469,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919,-2.203919],[23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.112272,23.076678,23.038249,22.994137,22.943355,22.886631,22.82397,22.754892,22.679003,22.596704,22.507622,22.409691,22.302332,22.185192,22.057706,21.919112,21.76877,21.606186,21.431022,21.2429,21.041644,20.827114,20.599135,20.3574,20.101993,19.833067,19.550925,19.25609,18.949376,18.631507,18.379705,18.136513,17.891683,17.646192,17.400685,17.155285,16.910428,16.666734,16.42488,16.185369,15.948661,15.715167,15.485269,15.25932,15.037582,14.820267,14.607536,14.399505,14.196244,13.997782,13.80411,13.615187,13.43094,13.251271,13.076061,12.905173,12.738455,12.575746,12.416877,12.261675,12.109964,11.961569,11.826422,11.70587,11.589942,11.478555,11.371623,11.269065,11.170796,11.076736,10.986803,10.90092,10.819008,10.740992,10.666797,10.596352,10.529586,10.466429,10.406814,10.350676,10.297952,10.248577,10.202491,10.159636,10.119951,10.083381,10.049869,10.019361,9.991803,9.967142,9.945326,9.926306,9.91003,9.896449,9.885516,9.877181,9.871398,9.86812,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301,9.867301]]}\"}"
  var array;
  obj2 = JSON.parse(obj);
  //console.log(obj2);
  var bd = JSON.parse(obj2['body']);
  //console.log(obj['body']);
  //console.log(bd['ssrpp']);
  var ssrpp = bd['ssrpp'];
  var maintenance = bd['Maintenance'];
  var initialnitrogen = bd['InitialNitrogen'];
  var initialbrix = bd['InitialBrix'];
  var lag = bd['Lag'];
  var viability = bd['Viability'];
  var ethinh = bd['EthInh'];

  //for (var key in bd) {
  //     console.log(key);
  //     console.log(bd[key]);
   //}

   var modelresults = bd['ModelResults'];
   //console.log(bd);
   var timestamp = modelresults[0];
   var brixBest = modelresults[1];
   var brixLowerBound = modelresults[2];
   var brixUpperBound = modelresults[3];
  //fetch('https://meshvines1.p.rapidapi.com/boultonmodel/mdgs', requestOptions)
//  	.then(response => response.json())
//  	.then(response => console.log(response))
//  	.catch(err => console.error(err));
//  var obj = JSON.parse(response);
  //alert(obj.ModelResults)
  //alert(obj.ModelResults.)
  var Dataset1 = {
    x: timestamp,
    y: modelresults[1],
    mode: "lines",
    type: "scatter",
    name: "BrixBest"
  };
  var Dataset2 = {
    x: timestamp,
    y: modelresults[2],
    mode: "lines",
    name: "BrixLowerBound"
  };
  var Dataset3 = {
    x: timestamp,
    y: modelresults[3],
    mode: "lines",
    name: "BrixUpperBound"
  };
  //timeMeasured = raw3[i]['Timestamp'];
  //brixMeasured = raw3[i]['Brix'];
  /*
  console.log(timeMeasured);
  var Dataset4 = {
    x: timeMeasured,
    y: brixMeasured,
    mode: "markers",
    marker:{
      size: 5
    },
    name: "Measured Brix"
  };
  //tempMeasured = raw3[i]['Temperature'];
  var Dataset5 = {
    x: timeMeasured,
    y: tempMeasured,
    mode: "markers",
    marker:{
      size: 5
    },
    name: "Measured Temperature"
  };
  */
  var labelShift = 25;
  var ssrppL = "SSRpp = ";
  var mntL = "MNT (1/hr) = ";
  var nitL = "NIT (mg/L) = ";
  var lagL = "LAG (hrs) = ";
  var viabL = "VIAB (L/(g*hr)) = ";
  var ethinhL = "ETHINH (L/g) = ";
  /*
  var ssrpp = bd['ssrpp'];
  var maintenance = bd['Maintenance'];
  var initialnitrogen = bd['InitialNitrogen'];
  var initialbrix = bd['InitialBrix'];
  var lag = bd['Lag'];
  var viability = bd['Viability'];
  var ethinh = bd['EthInh'];
  */
  var layout = {
    title: "Boulton Model Modified Direct Grid Search",
    xaxis: {
      title: "Time"
    },

    yaxis: {
      title: "Brix",
      range: [-5,30]
    },
    annotations: [
    {
      x: timestamp[timestamp.length-labelShift],
      y: 30,
      text: ssrppL.concat(ssrpp),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 28,
      text: mntL.concat(maintenance),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 26,
      text: nitL.concat(initialnitrogen),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 24,
      text: lagL.concat(lag),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 22,
      text: viabL.concat(viability),
      showarrow: false
    },
    {
      x: timestamp[timestamp.length-labelShift],
      y: 20,
      text: ethinhL.concat(ethinh),
      showarrow: false
    },

  ]
    //showlegend: true
  };

  var plot1 = document.getElementById("box1");
  Plotly.plot(plot1, [Dataset1,Dataset2,Dataset3], layout);
